<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>arch</display-name>
	
	<context-param>
		<param-name>contextConfigLocation</param-name> 
		<param-value>/WEB-INF/classes/conf/applicationContext.xml,
							/WEB-INF/classes/conf/jpa.xml,classpath:/conf/shiro-config.xml</param-value> 
	</context-param> 

	<!-- 上下文参数(第一启动),指定jdbc配置文件 </context-param> <context-param> <param-name>contextConfigLocation</param-name> 
		<param-value>/WEB-INF/configure/jdbc.xml</param-value> <param-value>classpath:/config/jdbc.xml</param-value> 
		</context-param> -->

	<listener>
		<listener-class>deep.web.OnlineListener</listener-class>
	</listener>
	<!-- 防止发生java.beans.Introspector内存泄漏，应将它配置在ContextLoaderListener的前面 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- 实例化Spring 容器 -->
	<!-- spring监听器(第二启动),应用启动时，监听器被执行，默认会去WEB-INF中查找applicationContext.xml文件  --> 
	<listener> 
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> 
	</listener> 

	<!-- springMVC编码拦截器(第三启动),springMVC内置的编码拦截器
	<filter> <filter-name>encodingFilter</filter-name> 
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> 
		<init-param> <param-name>encoding</param-name> <param-value>UTF-8</param-value> 
		</init-param> <init-param> <param-name>forceEncoding</param-name> <param-value>true</param-value> 
		</init-param> 
	</filter> 
	<filter-mapping> 
		<filter-name>encodingFilter</filter-name> 
		<url-pattern>/*</url-pattern> 
	</filter-mapping> 	 -->
	
	<!-- shiro filter -->
	<!-- 这里filter-name必须对应shiro-config.xml中定义的<bean id="shiroFilter"/>  
                       使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤  
                       通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->  	
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>  
            <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->  
            <param-name>targetFilterLifecycle</param-name>  
            <param-value>true</param-value>  
        </init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- springMVC 前置控制器 (第四启动)，在分发其它控制器前都要经过这个控制器 -->
	<servlet>
		<servlet-name>mvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/classes/conf/mvc.xml</param-value>
			<!-- 其中<param-value>**.xml</param-value> 这里可以使用多种写法 1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml 
				2、<param-value>/WEB-INF/classes/springMVC.xml</param-value> 3、<param-value>classpath*:springMVC-mvc.xml</param-value> 
				4、多个值用逗号分隔 -->
		</init-param>
		<load-on-startup>1</load-on-startup>
		<multipart-config>			
			<max-file-size>52428800</max-file-size>
			<max-request-size>52428800</max-request-size>
			<file-size-threshold>0</file-size-threshold>
		</multipart-config>		
	</servlet>
	
	<!-- 处理静态资源: 需写在DispatcherServlet的前面， 让defaultServlet先拦截，不会进入Spring处理
	
	不同的web容器默认的servlet 不同，参照如下
	
	Tomcat, Jetty, JBoss and GlassFish		默认servlet名称		==	“default”
	Google App Engine 						默认servlet名称 		==	"_ah_default"		
	Resin 									默认servlet名称		==	"resin-file"
	WebLogic 								默认servlet名称		==	"FileServlet"
	WebSphere								默认servlet名称		==	"SimpleFileServlet"
	 
	 -->
	
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.zip</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.ico</url-pattern>
	</servlet-mapping>
	
	<!-- DispatcherServlet  -->
	<servlet-mapping>
		<servlet-name>mvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<error-page>  
      <error-code>500</error-code>  
      <location>/error.jsp</location>  
	</error-page>  

	
	<welcome-file-list>
		<welcome-file>_index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
</web-app>
